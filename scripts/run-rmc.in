#!/bin/bash
# Copyright (c) 2014-2016 Michael J. Sullivan
# Use of this source code is governed by an MIT-style license that can be
# found in the LICENSE file.

set -e

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
RMC_INCLUDE_DIR="$DIR/include/"
RMC_LIB="$DIR/RMC.so"

LLVM_DIR=$(@CFG_LLVM_CONFIG@ --bindir)

PATH="$LLVM_DIR:$PATH"

# Argument defaults
RMC_PLATFORM=arm

# Argument handling
while true
do
	case "$1" in
		--gdb)
			shift
			RUN_GDB=1
			;;
		--x86)
			shift
			RMC_PLATFORM=x86
			;;
		--arm)
			shift
			RMC_PLATFORM=arm
			;;
		--power)
			shift
			RMC_PLATFORM=power
			;;
		--smt)
			shift
			USE_SMT=1
			;;
		--cleanup)
			shift
			DO_CLEANUP=1
			;;
		--exe)
			shift
			BUILD_EXE=1
			;;
		--opt)
			shift
			OPT_FLAG=-O2
			;;
		*)
			break
	esac
done

# Figure out C vs. C++ from filename
if [ "$(basename $1 .cpp).cpp" = "$(basename $1)" ]; then
	IS_CPP=1
	NAME=$(basename $1 .cpp)
	STD_FLAG=--std=gnu++11
else
	NAME=$(basename $1 .c)
	STD_FLAG=--std=gnu11
fi


GCC_VERSION=$(gcc --version | head -n1 | cut -d')' -f2 | cut -d" " -f2)

# Figure out platform details
case $RMC_PLATFORM in
	arm)
		TRIPLE="armv7a-linux-gnueabihf"
		# clang should maybe be able to automatically determine some of this!
		INCLUDE_FLAGS="-I /usr/arm-linux-gnueabihf/include/"
		if [ $IS_CPP ]; then
			INCLUDE_FLAGS="$INCLUDE_FLAGS -I /usr/arm-linux-gnueabihf/include/c++/4.9.1/ -I /usr/arm-linux-gnueabihf/include/c++/$GCC_VERSION/arm-linux-gnueabihf/"
		fi
		LINKER=arm-linux-gnueabihf-gcc
		;;
	power)
		TRIPLE="powerpc-linux-gnu"
		INCLUDE_FLAGS="-I /usr/powerpc-linux-gnu/include/"
		if [ $IS_CPP ]; then
			INCLUDE_FLAGS="$INCLUDE_FLAGS -I /usr/powerpc-linux-gnu/include/c++/4.9.1/ -I /usr/powerpc-linux-gnu/include/c++/$GCC_VERSION/powerpc-linux-gnu/"
		fi
		LINKER=powerpc-linux-gnu-gcc
		;;
	x86)
		TRIPLE="x86_64-unknown-linux-gnu"
		LINKER=clang
		;;
esac

PLATFORM_FLAGS="-target $TRIPLE"

if [ $BUILD_EXE ]; then
    DEF_FLAGS=""
else
    DEF_FLAGS="-DNO_TEST -DONLY_RMC"
fi

clang $STD_FLAG $OPT_FLAG $PLATFORM_FLAGS -I "$RMC_INCLUDE_DIR" $INCLUDE_FLAGS $DEF_FLAGS -DHAS_RMC=1 -Wall -emit-llvm -c -o $NAME.pre0.bc $1
llvm-dis $NAME.pre0.bc

# -instcombine is useful for annoying reasons; __c11_atomic_load
# generates code that indirects through an alloca without it
opt -mem2reg -instcombine $NAME.pre0.bc -o $NAME.pre.bc
llvm-dis $NAME.pre.bc

if [ $USE_SMT ]; then
	SMT_FLAGS=-rmc-use-smt
fi

if [ $RUN_GDB ]; then
	gdb --args opt -load $RMC_LIB -drop-funs -realize-rmc $SMT_FLAGS $NAME.pre.bc -o $NAME.bc
else
	time opt -load $RMC_LIB -drop-funs -realize-rmc $SMT_FLAGS $NAME.pre.bc -o $NAME.bc
fi

llvm-dis $NAME.bc

clang $PLATFORM_FLAGS -O -emit-llvm -c -o $NAME.opt.bc $NAME.bc
llvm-dis $NAME.opt.bc

cp $NAME.opt.bc $NAME.fin.bc
if [ $DO_CLEANUP ]; then
	opt -load ../RMC.so -cleanup-copies $NAME.opt.bc -o $NAME.fin.bc
fi
llvm-dis $NAME.fin.bc

# Run on -O2 because on POWER, -O3 runs an IR CSE pass as one of its
# target specific passes. Can we find a way to hook cleanup-copies into
# the target specific stuff?
llc "-mtriple=$TRIPLE" -O2 -o $NAME.s $NAME.fin.bc

if [ $BUILD_EXE ]; then
    $LINKER -pthread $NAME.s -o $NAME
fi
