#!/bin/bash
set -e

RMC_PLATFORM=arm

while true
do
	case "$1" in
		--gdb)
			shift
			RUN_GDB=1
			;;
		--x86)
			shift
			RMC_PLATFORM=x86
			;;
		--arm)
			shift
			RMC_PLATFORM=arm
			;;
		--power)
			shift
			RMC_PLATFORM=power
			;;
		--smt)
			shift
			USE_SMT=1
			;;
		--cleanup)
			shift
			DO_CLEANUP=1
			;;
		--exe)
			shift
			BUILD_EXE=1
			;;
		*)
			break
	esac
done


NAME=$(basename $1 .c)
PATH=../../build/Debug+Asserts/bin/:$PATH

case $RMC_PLATFORM in
	arm)
#		PLATFORM_FLAGS="--target=armv7a -mfloat-abi=hard"
		TRIPLE="armv7a-linux-gnueabihf"
#		INCLUDE_FLAGS="-I /usr/arm-linux-gnueabihf/include/c++/4.8.2/ -I /usr/arm-linux-gnueabihf/include/c++/4.8.2/arm-linux-gnueabihf/"
		INCLUDE_FLAGS="-I /usr/arm-linux-gnueabihf/include/"
		LINKER=arm-linux-gnueabihf-gcc
		;;
	power)
		TRIPLE="powerpc-linux-gnu"
		INCLUDE_FLAGS="-I /usr/powerpc-linux-gnu/include/"
		LINKER=powerpc-linux-gnu-gcc
		;;
	x86)
		TRIPLE="x86_64-unknown-linux-gnu"
		LINKER=clang
		;;
esac

PLATFORM_FLAGS="-target $TRIPLE"

if [ $BUILD_EXE ]; then
    DEF_FLAGS=""
else
    DEF_FLAGS="-DNO_TEST -DONLY_RMC"
fi

clang --std=gnu11 $PLATFORM_FLAGS $INCLUDE_FLAGS $DEF_FLAGS -DHAS_RMC=1 -Wall -emit-llvm -c -o $NAME.pre0.bc $1
llvm-dis $NAME.pre0.bc

# -instcombine is useful for annoying reasons; __c11_atomic_load
# generates code that indirects through an alloca without it
opt -mem2reg -instcombine $NAME.pre0.bc -o $NAME.pre.bc
#opt -mem2reg $NAME.pre0.bc -o $NAME.pre.bc
llvm-dis $NAME.pre.bc

if [ $USE_SMT ]; then
	SMT_FLAGS=-rmc-use-smt
fi

if [ $RUN_GDB ]; then
	gdb --args opt -load ../RMC.so -drop-funs -realize-rmc $SMT_FLAGS $NAME.pre.bc -o $NAME.bc
else
	time opt -load ../RMC.so -drop-funs -realize-rmc $SMT_FLAGS $NAME.pre.bc -o $NAME.bc
fi

llvm-dis $NAME.bc

clang $PLATFORM_FLAGS -O -emit-llvm -c -o $NAME.opt.bc $NAME.bc
llvm-dis $NAME.opt.bc

cp $NAME.opt.bc $NAME.fin.bc
if [ $DO_CLEANUP ]; then
	opt -load ../RMC.so -cleanup-copies $NAME.opt.bc -o $NAME.fin.bc
fi
llvm-dis $NAME.fin.bc

# Run on -O2 because on POWER, -O3 runs an IR CSE pass as one of its
# target specific passes. Can we find a way to hook cleanup-copies into
# the target specific stuff?
llc "-mtriple=$TRIPLE" -O2 -o $NAME.s $NAME.fin.bc

if [ $BUILD_EXE ]; then
    $LINKER -pthread $NAME.s -o $NAME
fi
